import{_ as n,V as t,W as s,a0 as a}from"./framework-2d083801.js";const e={},c=a(`<h2 id="未对齐" tabindex="-1"><a class="header-anchor" href="#未对齐" aria-hidden="true">#</a> 未对齐</h2><p>给出一个结构体</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> User <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	A <span class="token builtin">int32</span>
	B <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int32</span>
	C <span class="token builtin">string</span>
	D <span class="token builtin">bool</span>
	E <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>算出每个字段的 <code>size</code> 和 <code>align</code></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;User{} size=%d, align=%d\\n\\n&quot;</span><span class="token punctuation">,</span> unsafe<span class="token punctuation">.</span><span class="token function">Sizeof</span><span class="token punctuation">(</span>User<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> unsafe<span class="token punctuation">.</span><span class="token function">Alignof</span><span class="token punctuation">(</span>User<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;int32 size=%d, align=%d\\n&quot;</span><span class="token punctuation">,</span> unsafe<span class="token punctuation">.</span><span class="token function">Sizeof</span><span class="token punctuation">(</span><span class="token function">int32</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> unsafe<span class="token punctuation">.</span><span class="token function">Alignof</span><span class="token punctuation">(</span><span class="token function">int32</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;[]int32 size=%d, align=%d\\n&quot;</span><span class="token punctuation">,</span> unsafe<span class="token punctuation">.</span><span class="token function">Sizeof</span><span class="token punctuation">(</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int32</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> unsafe<span class="token punctuation">.</span><span class="token function">Alignof</span><span class="token punctuation">(</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int32</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;string size=%d, align=%d\\n&quot;</span><span class="token punctuation">,</span> unsafe<span class="token punctuation">.</span><span class="token function">Sizeof</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> unsafe<span class="token punctuation">.</span><span class="token function">Alignof</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;bool size=%d, align=%d\\n&quot;</span><span class="token punctuation">,</span> unsafe<span class="token punctuation">.</span><span class="token function">Sizeof</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span> unsafe<span class="token punctuation">.</span><span class="token function">Alignof</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;struct{} size=%d, align=%d\\n&quot;</span><span class="token punctuation">,</span> unsafe<span class="token punctuation">.</span><span class="token function">Sizeof</span><span class="token punctuation">(</span>K<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> unsafe<span class="token punctuation">.</span><span class="token function">Alignof</span><span class="token punctuation">(</span>K<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">/*
    结果
	User{} size=56, align=8
	
	int32 size=4, align=4
	[]int32 size=24, align=8
	string size=16, align=8
	bool size=1, align=1
	struct{} size=0, align=1
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>把结构体的所有字段相加的结果应该为：<code>4 + 24 + 16 + 1 + 0 = 45</code></p><p>但存在结构体补 <code>0</code> 的情况，所以这个结构体理想的大小应该为 <code>8</code> 的倍数 <code>48</code></p><h2 id="分析" tabindex="-1"><a class="header-anchor" href="#分析" aria-hidden="true">#</a> 分析</h2><p>结构体 <code>User</code> 有 6 个字段，内存的分布应该为如下：</p><table><thead><tr><th style="text-align:center;">0 - 7</th><th style="text-align:center;">8 - 15</th><th style="text-align:center;">16 - 23</th><th style="text-align:center;">24 - 31</th><th style="text-align:center;">32 - 39</th><th style="text-align:center;">40 - 47</th><th style="text-align:center;">48 - 55</th></tr></thead><tbody><tr><td style="text-align:center;">00000000</td><td style="text-align:center;">00000000</td><td style="text-align:center;">00000000</td><td style="text-align:center;">00000000</td><td style="text-align:center;">00000000</td><td style="text-align:center;">00000000</td><td style="text-align:center;">00000000</td></tr><tr><td style="text-align:center;">11110000</td><td style="text-align:center;">11111111</td><td style="text-align:center;">11111111</td><td style="text-align:center;">11111111</td><td style="text-align:center;">11111111</td><td style="text-align:center;">11111111</td><td style="text-align:center;">10000000</td></tr><tr><td style="text-align:center;"><code>int32</code></td><td style="text-align:center;"><code>[]int32</code></td><td style="text-align:center;"><code>[]int32</code></td><td style="text-align:center;"><code>[]int32</code></td><td style="text-align:center;"><code>string</code></td><td style="text-align:center;"><code>string</code></td><td style="text-align:center;"><code>bool</code> <code>struct{}</code></td></tr></tbody></table><p>修改结构体为：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> User <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	A <span class="token builtin">int32</span>
	D <span class="token builtin">bool</span>
	B <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int32</span>
	C <span class="token builtin">string</span>
	E <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在把 <code>bool</code> 移入到 <code>int32</code> 后面后，内存分布应该为</p><table><thead><tr><th style="text-align:center;">0 - 7</th><th style="text-align:center;">8 - 15</th><th style="text-align:center;">16 - 23</th><th style="text-align:center;">24 - 31</th><th style="text-align:center;">32 - 39</th><th style="text-align:center;">40 - 47</th><th style="text-align:center;">48 - 55</th></tr></thead><tbody><tr><td style="text-align:center;">00000000</td><td style="text-align:center;">00000000</td><td style="text-align:center;">00000000</td><td style="text-align:center;">00000000</td><td style="text-align:center;">00000000</td><td style="text-align:center;">00000000</td><td style="text-align:center;">00000000</td></tr><tr><td style="text-align:center;">11111000</td><td style="text-align:center;">11111111</td><td style="text-align:center;">11111111</td><td style="text-align:center;">11111111</td><td style="text-align:center;">11111111</td><td style="text-align:center;">11111111</td><td style="text-align:center;">00000000</td></tr><tr><td style="text-align:center;"><code>int32</code> <code>bool</code></td><td style="text-align:center;"><code>[]int32</code></td><td style="text-align:center;"><code>[]int32</code></td><td style="text-align:center;"><code>[]int32</code></td><td style="text-align:center;"><code>string</code></td><td style="text-align:center;"><code>string</code></td><td style="text-align:center;"><code>struct{}</code></td></tr></tbody></table><p>这么看内存应该为 <code>48</code> 但实际上还是 <code>56</code></p><p>同时，即使 <code>struct{}</code> 的 <code>size</code> 为 <code>0</code> 也会以偏移量 <code>1</code> 来占用内存，多余的部分会进行补 <code>0</code></p><h2 id="对齐" tabindex="-1"><a class="header-anchor" href="#对齐" aria-hidden="true">#</a> 对齐</h2><p>修改结构体为：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> User <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	A <span class="token builtin">int32</span>
	D <span class="token builtin">bool</span>
	E <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
	B <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int32</span>
	C <span class="token builtin">string</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时的内存分布为</p><table><thead><tr><th style="text-align:center;">0 - 7</th><th style="text-align:center;">8 - 15</th><th style="text-align:center;">16 - 23</th><th style="text-align:center;">24 - 31</th><th style="text-align:center;">32 - 39</th><th style="text-align:center;">40 - 47</th><th style="text-align:center;">48 - 55</th></tr></thead><tbody><tr><td style="text-align:center;">00000000</td><td style="text-align:center;">00000000</td><td style="text-align:center;">00000000</td><td style="text-align:center;">00000000</td><td style="text-align:center;">00000000</td><td style="text-align:center;">00000000</td><td style="text-align:center;">00000000</td></tr><tr><td style="text-align:center;">11111000</td><td style="text-align:center;">11111111</td><td style="text-align:center;">11111111</td><td style="text-align:center;">11111111</td><td style="text-align:center;">11111111</td><td style="text-align:center;">11111111</td><td style="text-align:center;">00000000</td></tr><tr><td style="text-align:center;"><code>int32</code> <code>bool</code> <code>struct{}</code></td><td style="text-align:center;"><code>[]int32</code></td><td style="text-align:center;"><code>[]int32</code></td><td style="text-align:center;"><code>[]int32</code></td><td style="text-align:center;"><code>string</code></td><td style="text-align:center;"><code>string</code></td><td style="text-align:center;"></td></tr></tbody></table><p>大小如愿变成了 <code>48</code></p>`,22),l=[c];function i(o,p){return t(),s("div",null,l)}const u=n(e,[["render",i],["__file","align.html.vue"]]);export{u as default};
