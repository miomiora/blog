import{_ as u,V as l,W as i,Z as r,$ as a,a0 as t,C as k,X as n,Y as s}from"./framework-0aae388a.js";const d={},g=t(`<p>怎么忍得住不用 <code>Go</code> 来试试的，选用的包为 <code>github.com/mongodb/mongo-go-driver</code></p><h2 id="预备" tabindex="-1"><a class="header-anchor" href="#预备" aria-hidden="true">#</a> 预备</h2><p>在正式开始之前，有一个东西在这个包中是必须得了解的，那就是 <code>bson</code> 以下是官方注释</p><table><thead><tr><th style="text-align:center;">类型</th><th style="text-align:center;">说明</th><th style="text-align:center;">示例</th></tr></thead><tbody><tr><td style="text-align:center;">bson.D</td><td style="text-align:center;">BSON文档的有序表示，在需要顺序的场合比较重要，也就是 <code>MongoDB</code> 的命令</td><td style="text-align:center;"><code>bson.D{{&quot;foo&quot;, &quot;bar&quot;}, {&quot;hello&quot;,&quot;world&quot;}, {&quot;pi&quot;, 3.14159}}</code></td></tr><tr><td style="text-align:center;">bson.E</td><td style="text-align:center;">主要作为bson.D的一个元素，通常在一个D中跟使用</td><td style="text-align:center;"><code>bson.E{&quot;foo&quot;, &quot;bar&quot;}</code></td></tr><tr><td style="text-align:center;">bson.M</td><td style="text-align:center;">BSON文档的无序表示<code>map[string]interface{}</code></td><td style="text-align:center;"><code>bson.M{&quot;foo&quot;: &quot;bar&quot;, &quot;hello&quot;: &quot;world&quot;, &quot;pi&quot;: 3.14159}</code></td></tr><tr><td style="text-align:center;">bson.A</td><td style="text-align:center;">BSON文档数组的有序表示</td><td style="text-align:center;"><code>bson.A{&quot;bar&quot;, &quot;world&quot;, 3.14159, bson.D{{&quot;qux&quot;, 12345}}}</code></td></tr></tbody></table><div class="language-go" data-ext="go"><pre class="language-go"><code><span class="token comment">// 下面go使用到的结构体</span>
<span class="token keyword">type</span> User <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	Name <span class="token builtin">string</span> <span class="token string">\`json:&quot;name&quot;\`</span>
	Age  <span class="token builtin">int</span>    <span class="token string">\`json:&quot;age&quot;\`</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="连接" tabindex="-1"><a class="header-anchor" href="#连接" aria-hidden="true">#</a> 连接</h2><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>ctx<span class="token punctuation">,</span> cancel <span class="token operator">:=</span> context<span class="token punctuation">.</span><span class="token function">WithTimeout</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token operator">*</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>
<span class="token keyword">defer</span> <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

client<span class="token punctuation">,</span> err <span class="token operator">:=</span> mongo<span class="token punctuation">.</span><span class="token function">Connect</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> options<span class="token punctuation">.</span><span class="token function">Client</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ApplyURI</span><span class="token punctuation">(</span><span class="token string">&quot;mongodb://localhost:27017&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> err <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">Disconnect</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="选择集合" tabindex="-1"><a class="header-anchor" href="#选择集合" aria-hidden="true">#</a> 选择集合</h2><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>collection <span class="token operator">:=</span> client<span class="token punctuation">.</span><span class="token function">Database</span><span class="token punctuation">(</span><span class="token string">&quot;miodb&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Collection</span><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="增" tabindex="-1"><a class="header-anchor" href="#增" aria-hidden="true">#</a> 增</h2><ul><li>插入单条数据</li></ul><div class="language-go" data-ext="go"><pre class="language-go"><code><span class="token function">InsertOne</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> document <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> opts <span class="token operator">...</span><span class="token operator">*</span>options<span class="token punctuation">.</span>InsertOneOptions<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>InsertOneResult<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span>
</code></pre></div><p>示例：因为传参的 <code>document</code> 是 <code>interface{}</code> 的数据类型，直接用结构体就可以了，用 <code>bson</code> 构建文档数据也可以</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>res<span class="token punctuation">,</span> err <span class="token operator">:=</span> collection<span class="token punctuation">.</span><span class="token function">InsertOne</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> User<span class="token punctuation">{</span><span class="token string">&quot;miomiora1&quot;</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>InsertedID<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>插入多条数据</li></ul><div class="language-go" data-ext="go"><pre class="language-go"><code><span class="token function">InsertMany</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> documents <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> opts <span class="token operator">...</span><span class="token operator">*</span>options<span class="token punctuation">.</span>InsertManyOptions<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>InsertManyResult<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span>
</code></pre></div><p>插入多条数据的时候有说法了，因为传参的 <code>document</code> 是 <code>[]interface{}</code> 也就是说如果想直接用结构体切片是不能直接传进去的，下面提供两种方法：</p>`,17),m=n("div",{class:"language-go line-numbers-mode","data-ext":"go"},[n("pre",{class:"language-go"},[n("code",null,[n("span",{class:"token comment"},"// 创建一个新的[]interface{}的切片，并循环把结构体切片给放进去"),s(`
userList `),n("span",{class:"token operator"},":="),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),s("User"),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"{"),n("span",{class:"token string"},'"miomiora1"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"19"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"{"),n("span",{class:"token string"},'"miomiora2"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"20"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"{"),n("span",{class:"token string"},'"miomiora3"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"21"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token keyword"},"var"),s(" userInterface "),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token keyword"},"interface"),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token boolean"},"_"),n("span",{class:"token punctuation"},","),s(" u "),n("span",{class:"token operator"},":="),s(),n("span",{class:"token keyword"},"range"),s(" userList "),n("span",{class:"token punctuation"},"{"),s(`
	userInterface `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"append"),n("span",{class:"token punctuation"},"("),s("userInterface"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token keyword"},"interface"),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"("),s("u"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

res`),n("span",{class:"token punctuation"},","),s(" err "),n("span",{class:"token operator"},":="),s(" collection"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"InsertMany"),n("span",{class:"token punctuation"},"("),s("ctx"),n("span",{class:"token punctuation"},","),s(" userInterface"),n("span",{class:"token punctuation"},")"),s(`
id `),n("span",{class:"token operator"},":="),s(" res"),n("span",{class:"token punctuation"},"."),s(`InsertedIDs
fmt`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"Println"),n("span",{class:"token punctuation"},"("),s("id"),n("span",{class:"token punctuation"},")"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),v=n("div",{class:"language-go line-numbers-mode","data-ext":"go"},[n("pre",{class:"language-go"},[n("code",null,[n("span",{class:"token comment"},"// 直接用[]interface{}创建切片"),s(`
userInterface `),n("span",{class:"token operator"},":="),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token keyword"},"interface"),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"{"),s(`
	User`),n("span",{class:"token punctuation"},"{"),n("span",{class:"token string"},'"miomiora1"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"19"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
	User`),n("span",{class:"token punctuation"},"{"),n("span",{class:"token string"},'"miomiora2"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"20"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
	User`),n("span",{class:"token punctuation"},"{"),n("span",{class:"token string"},'"miomiora3"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"21"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

res`),n("span",{class:"token punctuation"},","),s(" err "),n("span",{class:"token operator"},":="),s(" collection"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"InsertMany"),n("span",{class:"token punctuation"},"("),s("ctx"),n("span",{class:"token punctuation"},","),s(" userInterface"),n("span",{class:"token punctuation"},")"),s(`
id `),n("span",{class:"token operator"},":="),s(" res"),n("span",{class:"token punctuation"},"."),s(`InsertedIDs
fmt`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"Println"),n("span",{class:"token punctuation"},"("),s("id"),n("span",{class:"token punctuation"},")"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),b=t(`<h2 id="过滤器" tabindex="-1"><a class="header-anchor" href="#过滤器" aria-hidden="true">#</a> 过滤器</h2><p>在接下来的 改、查、删 等操作中，都会使用到过滤器，这里的过滤器就推荐使用 <code>bson</code> 来操作了，在前面提到的 <code>bson</code> 有序以及无序的问题，如果是顺序不重要的语句，可以使用M来操作。</p><ul><li>不等于</li></ul><p><code>bson.M{&quot;name&quot;: bson.M{&quot;$ne&quot;: &quot;miomiora&quot;}}</code></p><ul><li>大于</li></ul><p><code>bson.M{&quot;age&quot;: bson.M{&quot;$gt&quot;: 10}}</code></p><ul><li>大于等于</li></ul><p><code>bson.M{&quot;age&quot;: bson.M{&quot;$gte&quot;: 10}}</code></p><ul><li>小于</li></ul><p><code>bson.M{&quot;age&quot;: bson.M{&quot;$lt&quot;: 10}}</code></p><ul><li>小于等于</li></ul><p><code>bson.M{&quot;age&quot;: bson.M{&quot;$lte&quot;: 10}}</code></p><ul><li>包含</li></ul><p><code>bson.M{&quot;name&quot;: bson.M{&quot;$in&quot;: []string{&quot;hanamaru&quot;, &quot;yui&quot;}}</code></p><ul><li>不包含</li></ul><p><code>bson.M{&quot;name&quot;: bson.M{&quot;$nin&quot;: []string{&quot;hanamaru&quot;, &quot;yui&quot;}}</code></p><ul><li>或</li></ul><p><code>bson.M{&quot;$or&quot;: []bson.M{{&quot;name&quot;: &quot;miomiora&quot;}, {&quot;age&quot;: bson.M{&quot;$gt&quot;: 10}}}}</code></p><ul><li>正则</li></ul><table><thead><tr><th style="text-align:center;">表达式</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>^</code></td><td style="text-align:center;">匹配以指定模式开头的字符串</td></tr><tr><td style="text-align:center;"><code>$</code></td><td style="text-align:center;">匹配以指定模式结尾的字符串</td></tr><tr><td style="text-align:center;"><code>.</code></td><td style="text-align:center;">匹配除换行符以外的任何单个字符</td></tr><tr><td style="text-align:center;"><code>*</code></td><td style="text-align:center;">匹配前面的模式零次或多次</td></tr><tr><td style="text-align:center;"><code>+</code></td><td style="text-align:center;">匹配前面的模式一次或多次</td></tr><tr><td style="text-align:center;"><code>?</code></td><td style="text-align:center;">匹配前面的模式零次或一次</td></tr><tr><td style="text-align:center;"><code>[]</code></td><td style="text-align:center;">匹配括号中的任何字符</td></tr><tr><td style="text-align:center;"><code>\\d</code></td><td style="text-align:center;">匹配任何数字字符</td></tr><tr><td style="text-align:center;"><code>\\w</code></td><td style="text-align:center;">匹配任何字母数字字符</td></tr><tr><td style="text-align:center;"><code>\\s</code></td><td style="text-align:center;">匹配任何空格字符</td></tr><tr><td style="text-align:center;"><code>\\D</code></td><td style="text-align:center;">匹配任何非数字字符</td></tr><tr><td style="text-align:center;"><code>\\W</code></td><td style="text-align:center;">匹配任何非字母数字字符</td></tr><tr><td style="text-align:center;"><code>\\S</code></td><td style="text-align:center;">匹配任何非空格字符</td></tr></tbody></table><p>示例：以 m 开头，中间可以出现任何字母数字字符，并且以 1 结尾</p><p><code>bson.M{&quot;name&quot;: bson.M{&quot;$regex&quot;: &quot;^m\\\\w*1$&quot;}}</code></p><ul><li>全部文档</li></ul><p><code>bson.D{{}}</code></p><h2 id="查" tabindex="-1"><a class="header-anchor" href="#查" aria-hidden="true">#</a> 查</h2><ul><li>查找单条文档</li></ul><div class="language-go" data-ext="go"><pre class="language-go"><code><span class="token function">FindOne</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> filter <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> opts <span class="token operator">...</span><span class="token operator">*</span>options<span class="token punctuation">.</span>FindOneOptions<span class="token punctuation">)</span> <span class="token operator">*</span>SingleResult
</code></pre></div><ul><li>查找多条文档</li></ul><div class="language-go" data-ext="go"><pre class="language-go"><code><span class="token function">Find</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> filter <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> opts <span class="token operator">...</span><span class="token operator">*</span>options<span class="token punctuation">.</span>FindOptions<span class="token punctuation">)</span> <span class="token punctuation">(</span>cur <span class="token operator">*</span>Cursor<span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span>
</code></pre></div><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// 定义过滤器</span>
filter <span class="token operator">:=</span> bson<span class="token punctuation">.</span>M<span class="token punctuation">{</span><span class="token string">&quot;$or&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>bson<span class="token punctuation">.</span>M<span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;miomiora&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">:</span> bson<span class="token punctuation">.</span>M<span class="token punctuation">{</span><span class="token string">&quot;$gt&quot;</span><span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span>

<span class="token comment">// 根据过滤器查找多条文档</span>
cur<span class="token punctuation">,</span> err <span class="token operator">:=</span> collection<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> filter<span class="token punctuation">)</span>
<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;collection.Find(ctx, filter) err &quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span>
<span class="token punctuation">}</span>
<span class="token comment">// 关闭游标</span>
<span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span>cur <span class="token operator">*</span>mongo<span class="token punctuation">.</span>Cursor<span class="token punctuation">,</span> ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	err <span class="token operator">:=</span> cur<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">(</span>cur<span class="token punctuation">,</span> ctx<span class="token punctuation">)</span>

<span class="token comment">// 从游标中获取查找到的数据，并存入 userList中</span>
<span class="token keyword">var</span> userList <span class="token punctuation">[</span><span class="token punctuation">]</span>User
err <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token function">All</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token operator">&amp;</span>userList<span class="token punctuation">)</span>
<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;cur.All err &quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span>
<span class="token punctuation">}</span>

fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>userList<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="改" tabindex="-1"><a class="header-anchor" href="#改" aria-hidden="true">#</a> 改</h2><ul><li>修改单条</li></ul><div class="language-go" data-ext="go"><pre class="language-go"><code><span class="token function">UpdateOne</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> filter <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> update <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> opts <span class="token operator">...</span><span class="token operator">*</span>options<span class="token punctuation">.</span>UpdateOptions<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>UpdateResult<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span>
</code></pre></div><p>修改的 <code>update</code> 参数也可以直接传入结构体，但没指定的字段会初始化为零值（不推荐）</p><ul><li>修改多条</li></ul><div class="language-go" data-ext="go"><pre class="language-go"><code><span class="token function">UpdateMany</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> filter <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> update <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> opts <span class="token operator">...</span><span class="token operator">*</span>options<span class="token punctuation">.</span>UpdateOptions<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>UpdateResult<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span>
</code></pre></div><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// 定义过滤器，这里的意思为 name 包含 miomiora 的文档</span>
filter <span class="token operator">:=</span> bson<span class="token punctuation">.</span>M<span class="token punctuation">{</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span> bson<span class="token punctuation">.</span>M<span class="token punctuation">{</span><span class="token string">&quot;$regex&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;miomiora&quot;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>

<span class="token comment">// 定义更新的数据，意为把 name 包含 miomiora 的文档中的 name 都改成 “批量修改”</span>
update <span class="token operator">:=</span> bson<span class="token punctuation">.</span>M<span class="token punctuation">{</span><span class="token string">&quot;$set&quot;</span><span class="token punctuation">:</span> bson<span class="token punctuation">.</span>M<span class="token punctuation">{</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;批量修改&quot;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>
many<span class="token punctuation">,</span> err <span class="token operator">:=</span> collection<span class="token punctuation">.</span><span class="token function">UpdateMany</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> filter<span class="token punctuation">,</span> update<span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>many<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="删" tabindex="-1"><a class="header-anchor" href="#删" aria-hidden="true">#</a> 删</h2><ul><li>删除单条</li></ul><div class="language-go" data-ext="go"><pre class="language-go"><code><span class="token function">DeleteOne</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> filter <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> opts <span class="token operator">...</span><span class="token operator">*</span>options<span class="token punctuation">.</span>DeleteOptions<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>DeleteResult<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span>
</code></pre></div><ul><li>删除多条</li></ul><div class="language-go" data-ext="go"><pre class="language-go"><code><span class="token function">DeleteMany</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> filter <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> opts <span class="token operator">...</span><span class="token operator">*</span>options<span class="token punctuation">.</span>DeleteOptions<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>DeleteResult<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span>
</code></pre></div><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// 删除刚刚批量更新的文档，以及 name 为 yui 的文档</span>
filter <span class="token operator">:=</span> bson<span class="token punctuation">.</span>M<span class="token punctuation">{</span><span class="token string">&quot;$or&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>bson<span class="token punctuation">.</span>M<span class="token punctuation">{</span>
	<span class="token punctuation">{</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;批量修改&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">{</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;yui&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">}</span>

many<span class="token punctuation">,</span> err <span class="token operator">:=</span> collection<span class="token punctuation">.</span><span class="token function">DeleteMany</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> filter<span class="token punctuation">)</span>
<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;collection.DeleteMany(ctx, filter) err &quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span>
<span class="token punctuation">}</span>

fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>many<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,43);function q(x,f){const o=k("CodeTabs");return l(),i("div",null,[g,r(o,{id:"105",data:[{title:"方式一"},{title:"方式二"}],"tab-id":"shell"},{tab0:a(({title:e,value:p,isActive:c})=>[m]),tab1:a(({title:e,value:p,isActive:c})=>[v]),_:1}),b])}const h=u(d,[["render",q],["__file","6go.html.vue"]]);export{h as default};
